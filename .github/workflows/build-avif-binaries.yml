name: Build AVIF binaries

on:
  push:
    branches:
      - '**'
  workflow_dispatch: # Allows manual triggering  

jobs:
  build:
    runs-on: ${{matrix.os}}
    timeout-minutes: 65
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-24.04, ubuntu-24.04-arm, macos-26, macos-15-intel, windows-2025, windows-11-arm ]
        target: [ default ] 
#        include:
#          - os: ubuntu-24.04
#            target: linux-musl-x64
#          - os: ubuntu-24.04
#            target: linux-musl-x86
#          - os: ubuntu-24.04
#            target: linux-x86
#          - os: ubuntu-24.04-arm
#            target: linux-musl-arm64
#          - os: ubuntu-24.04-arm
#            target: linux-arm32
#          - os: ubuntu-24.04-arm
#            target: linux-musl-arm32
#          - os: windows-2025
#            target: win-x86
#          - os: windows-11-arm
#            target: win-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential nasm cmake ninja-build libjpeg-dev libpng-dev libtiff-dev libwebp-dev libaom-dev libyuv-dev zlib1g-dev clang
      - name: Setup cmake
        if: runner.os != 'Linux'
        uses: jwlawson/actions-setup-cmake@v2
      - name: Set up nasm
        if: runner.os != 'Linux'
        uses: ilammy/setup-nasm@v1

      - name: Set up Zig (for cross builds)
        if: matrix.target != 'default'
        uses: mlugg/setup-zig@v2
      - name: Install libraries
        if: runner.os == 'Windows'
        uses: johnwason/vcpkg-action@v7
        id: vcpkg
        env:
          TRIPLET: ${{ runner.arch == 'X64' && 'x64-windows' || 'arm64-windows' }}
        with:
          token: ${{ github.token }}
          cache-key: ${{ hashFiles('libavif/cmake/Modules/*', 'libavif/ext/*.cmd', 'libavif/ext/*.sh') }}
          pkgs: libjpeg-turbo libpng zlib
          triplet: ${{ env.TRIPLET }}

      - name: Build libavif binaries
        shell: bash
        run: |
          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DAVIF_CODEC_AOM=LOCAL \
          -DCONFIG_PIC=1 \
          -DAVIF_LIBYUV=LOCAL \
          -DAVIF_LIBSHARPYUV=LOCAL \
          -DAVIF_BUILD_APPS=ON \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_C_COMPILER_WORKS=1 \
          -DCMAKE_CXX_COMPILER_WORKS=1"

          if [ "${{ runner.os }}" = "Windows" ]; then
            # Switch to clang-cl and add Windows-specific options
            CMAKE_ARGS=$(echo "$CMAKE_ARGS" | sed 's/clang++/clang-cl/g' | sed 's/clang/clang-cl/g')
            CMAKE_ARGS="$CMAKE_ARGS \
            -DAVIF_JPEG=LOCAL \
            -DAVIF_ZLIBPNG=LOCAL"
            if [ "${{ runner.arch }}" = "ARM64" ]; then
              CMAKE_ARGS="$CMAKE_ARGS -DENABLE_NEON=1 -DENABLE_SSE=0"
            fi
          fi

          cmake -S libavif -B libavif/build $CMAKE_ARGS
          cmake --build libavif/build --config Release --parallel

      - name: Collect avif binaries
        id: collect-avif
        shell: bash
        run: |
          ARTIFACTS=""
          for f in libavif/build/avif*; do
            if [[ -f "$f" && "$f" != *.* ]]; then
              ARTIFACTS="$ARTIFACTS $f"
            fi
          done
          for f in libavif/build/Release/avif*.exe; do
            if [[ -f "$f" ]]; then
              ARTIFACTS="$ARTIFACTS $f"
            fi
          done
          echo "ARTIFACTS=$ARTIFACTS" >> $GITHUB_ENV
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{runner.os}}-${{runner.arch}}
          path: ${{ env.ARTIFACTS }}
          if-no-files-found: error
